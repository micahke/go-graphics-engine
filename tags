!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/micah/Documents/go-graphics-engine/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/9213292e/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
AddBuffer	core/vertex_array.go	/^func (vao *VertexArray) AddBuffer(vb VertexBuffer, layout VertexBufferLayout) {$/;"	f	struct:core.VertexArray
Bind	core/index_buffer.go	/^func (ib *IndexBuffer) Bind() {$/;"	f	struct:core.IndexBuffer
Bind	core/shader.go	/^func (shader *Shader) Bind() {$/;"	f	struct:core.Shader
Bind	core/texture.go	/^func (texture *Texture) Bind(slot uint32) {$/;"	f	struct:core.Texture
Bind	core/vertex_array.go	/^func (vao *VertexArray) Bind() {$/;"	f	struct:core.VertexArray
Bind	core/vertex_buffer.go	/^func (vb *VertexBuffer) Bind() {$/;"	f	struct:core.VertexBuffer
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
CompileShader	core/shader.go	/^func (shader *Shader) CompileShader(source string, shaderType uint32) uint32 {$/;"	f	struct:core.Shader	typeref:typename:uint32
CreateShader	core/shader.go	/^func (shader *Shader) CreateShader(vertexShader string, fragmentShader string) {$/;"	f	struct:core.Shader
Draw	core/renderer.go	/^func (renderer *Renderer) Draw(va VertexArray, ib IndexBuffer, shader Shader) {$/;"	f	struct:core.Renderer
GetCount	core/index_buffer.go	/^func (ib *IndexBuffer) GetCount() int {$/;"	f	struct:core.IndexBuffer	typeref:typename:int
GetElements	core/vertex_buffer_layout.go	/^func (vbl *VertexBufferLayout) GetElements() []VertexBufferElement {$/;"	f	struct:core.VertexBufferLayout	typeref:typename:[]VertexBufferElement
GetHeight	core/texture.go	/^func (texture *Texture) GetHeight() int32 {$/;"	f	struct:core.Texture	typeref:typename:int32
GetStride	core/vertex_buffer_layout.go	/^func (vbl *VertexBufferLayout) GetStride() int {$/;"	f	struct:core.VertexBufferLayout	typeref:typename:int
GetTypeSize	core/vertex_buffer_element.go	/^func (vbl *VertexBufferElement) GetTypeSize() int {$/;"	f	struct:core.VertexBufferElement	typeref:typename:int
GetUniformLocation	core/shader.go	/^func (shader *Shader) GetUniformLocation(name string) int32 {$/;"	f	struct:core.Shader	typeref:typename:int32
GetWidth	core/texture.go	/^func (texture *Texture) GetWidth() int32 {$/;"	f	struct:core.Texture	typeref:typename:int32
IndexBuffer	core/index_buffer.go	/^type IndexBuffer struct {$/;"	s	package:core
NewIndexBuffer	core/index_buffer.go	/^func NewIndexBuffer(data []uint32) IndexBuffer {$/;"	f	package:core	typeref:typename:IndexBuffer
NewRenderer	core/renderer.go	/^func NewRenderer() *Renderer {$/;"	f	package:core	typeref:typename:*Renderer
NewShader	core/shader.go	/^func NewShader(vertexPath string, fragmentPath string) Shader {$/;"	f	package:core	typeref:typename:Shader
NewTexture	core/texture.go	/^func NewTexture(path string) Texture {$/;"	f	package:core	typeref:typename:Texture
NewVertexArray	core/vertex_array.go	/^func NewVertexArray() VertexArray {$/;"	f	package:core	typeref:typename:VertexArray
NewVertexBuffer	core/vertex_buffer.go	/^func NewVertexBuffer(data []float32) VertexBuffer {$/;"	f	package:core	typeref:typename:VertexBuffer
NewVertexBufferElement	core/vertex_buffer_element.go	/^func NewVertexBufferElement(typ int, count int, normalized bool) *VertexBufferElement {$/;"	f	package:core	typeref:typename:*VertexBufferElement
NewVertexBufferLayout	core/vertex_buffer_layout.go	/^func NewVertexBufferLayout() VertexBufferLayout {$/;"	f	package:core	typeref:typename:VertexBufferLayout
ParseShader	core/shader.go	/^func (shader *Shader) ParseShader(shaderPath string) string {$/;"	f	struct:core.Shader	typeref:typename:string
Pos	imgui.ini	/^Pos=536,87$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=650,20$/;"	k	section:Window
Pushc	core/vertex_buffer_layout.go	/^func (vbl *VertexBufferLayout) Pushc(count int) {$/;"	f	struct:core.VertexBufferLayout
Pushf	core/vertex_buffer_layout.go	/^func (vbl *VertexBufferLayout) Pushf(count int) {$/;"	f	struct:core.VertexBufferLayout
Pushi	core/vertex_buffer_layout.go	/^func (vbl *VertexBufferLayout) Pushi(count int) {$/;"	f	struct:core.VertexBufferLayout
Renderer	core/renderer.go	/^type Renderer struct {$/;"	s	package:core
SetUniform1f	core/shader.go	/^func (shader *Shader) SetUniform1f(name string, value float32) {$/;"	f	struct:core.Shader
SetUniform1i	core/shader.go	/^func (shader *Shader) SetUniform1i(name string, value int32) {$/;"	f	struct:core.Shader
SetUniform4f	core/shader.go	/^func (shader *Shader) SetUniform4f(name string, v0 float32, v1 float32, v2 float32, v3 float32) /;"	f	struct:core.Shader
SetUniformMat4f	core/shader.go	/^func (shader *Shader) SetUniformMat4f(name string, matrix mgl32.Mat4) {$/;"	f	struct:core.Shader
Shader	core/shader.go	/^type Shader struct {$/;"	s	package:core
Size	imgui.ini	/^Size=198,71$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui.ini	/^Size=550,680$/;"	k	section:Window
Texture	core/texture.go	/^type Texture struct {$/;"	s	package:core
Unbind	core/index_buffer.go	/^func (ib *IndexBuffer) Unbind() {$/;"	f	struct:core.IndexBuffer
Unbind	core/shader.go	/^func (shader *Shader) Unbind() {$/;"	f	struct:core.Shader
Unbind	core/texture.go	/^func (texture *Texture) Unbind() {$/;"	f	struct:core.Texture
Unbind	core/vertex_array.go	/^func (vao *VertexArray) Unbind() {$/;"	f	struct:core.VertexArray
Unbind	core/vertex_buffer.go	/^func (vb *VertexBuffer) Unbind() {$/;"	f	struct:core.VertexBuffer
VertexArray	core/vertex_array.go	/^type VertexArray struct {$/;"	s	package:core
VertexBuffer	core/vertex_buffer.go	/^type VertexBuffer struct {$/;"	s	package:core
VertexBufferElement	core/vertex_buffer_element.go	/^type VertexBufferElement struct {$/;"	s	package:core
VertexBufferLayout	core/vertex_buffer_layout.go	/^type VertexBufferLayout struct {$/;"	s	package:core
Window	imgui.ini	/^[Window][Another Window]$/;"	s
Window	imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
core	core/index_buffer.go	/^package core$/;"	p
core	core/renderer.go	/^package core$/;"	p
core	core/shader.go	/^package core$/;"	p
core	core/texture.go	/^package core$/;"	p
core	core/vertex_array.go	/^package core$/;"	p
core	core/vertex_buffer.go	/^package core$/;"	p
core	core/vertex_buffer_element.go	/^package core$/;"	p
core	core/vertex_buffer_layout.go	/^package core$/;"	p
init	app.go	/^func init() {$/;"	f	package:main
m_BPP	core/texture.go	/^	m_BPP             int$/;"	m	struct:core.Texture	typeref:typename:int
m_Count	core/index_buffer.go	/^	m_Count      int$/;"	m	struct:core.IndexBuffer	typeref:typename:int
m_Count	core/vertex_buffer_element.go	/^	m_Count      int$/;"	m	struct:core.VertexBufferElement	typeref:typename:int
m_Elements	core/vertex_buffer_layout.go	/^    m_Elements []VertexBufferElement$/;"	m	struct:core.VertexBufferLayout	typeref:typename:[]VertexBufferElement
m_FilePath	core/texture.go	/^	m_FilePath        string$/;"	m	struct:core.Texture	typeref:typename:string
m_FragmentPath	core/shader.go	/^	m_FragmentPath         string$/;"	m	struct:core.Shader	typeref:typename:string
m_Height	core/texture.go	/^	m_Width, m_Height int32$/;"	m	struct:core.Texture	typeref:typename:int32
m_LocalBuffer	core/texture.go	/^	m_LocalBuffer     []uint8$/;"	m	struct:core.Texture	typeref:typename:[]uint8
m_Normalized	core/vertex_buffer_element.go	/^	m_Normalized bool$/;"	m	struct:core.VertexBufferElement	typeref:typename:bool
m_RendererID	core/index_buffer.go	/^	m_RendererID uint32$/;"	m	struct:core.IndexBuffer	typeref:typename:uint32
m_RendererID	core/texture.go	/^	m_RendererID      uint32$/;"	m	struct:core.Texture	typeref:typename:uint32
m_RendererID	core/vertex_array.go	/^	m_RendererID uint32$/;"	m	struct:core.VertexArray	typeref:typename:uint32
m_RendererID	core/vertex_buffer.go	/^	m_RendererID uint32$/;"	m	struct:core.VertexBuffer	typeref:typename:uint32
m_Renderer_ID	core/shader.go	/^	m_Renderer_ID          uint32$/;"	m	struct:core.Shader	typeref:typename:uint32
m_Stride	core/vertex_buffer_layout.go	/^    m_Stride   int$/;"	m	struct:core.VertexBufferLayout	typeref:typename:int
m_Type	core/vertex_buffer_element.go	/^	m_Type       int$/;"	m	struct:core.VertexBufferElement	typeref:typename:int
m_UniformLocationCache	core/shader.go	/^	m_UniformLocationCache map[string]int32$/;"	m	struct:core.Shader	typeref:typename:map[string]int32
m_VertexPath	core/shader.go	/^	m_VertexPath           string$/;"	m	struct:core.Shader	typeref:typename:string
m_Width	core/texture.go	/^	m_Width, m_Height int32$/;"	m	struct:core.Texture	typeref:typename:int32
main	app.go	/^func main() {$/;"	f	package:main
main	app.go	/^package main$/;"	p
